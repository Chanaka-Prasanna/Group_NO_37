name: Selenium Cucumber TestNG Pipeline

on:
  push:
    branches:
      - 204175A
  pull_request:
    branches:
      - 204175A

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/UI/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 5: Install Google Chrome
      - name: Install Google Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version

      # Step 6: Install ChromeDriver Matching Chrome Version
      - name: Install ChromeDriver
        run: |
          # Validate Chrome Installation
          if ! google-chrome --version; then
            echo "Google Chrome installation failed!" >&2
            exit 1
          fi

          # Fetch the version of installed Chrome
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d '.' -f 1)
          echo "Detected major Chrome version: $CHROME_VERSION"

          # Fetch corresponding ChromeDriver version
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "No matching ChromeDriver version found for Chrome version ${CHROME_VERSION}!" >&2
            exit 1
          fi

          echo "Matching ChromeDriver version: $CHROMEDRIVER_VERSION"

          # Download and unzip the appropriate ChromeDriver version
          wget -N "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip" -P /tmp
          unzip /tmp/chromedriver_linux64.zip -d /tmp
          mkdir -p UI/src/test/resources/driver/
          mv /tmp/chromedriver UI/src/test/resources/driver/chromedriver
          chmod +x UI/src/test/resources/driver/chromedriver



      # Step 6: Install Specific ChromeDriver Version
      - name: Install ChromeDriver
        run: |
          CHROMEDRIVER_VERSION=117.0.5938.132
          wget -N "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip" -P /tmp
          unzip /tmp/chromedriver_linux64.zip -d /tmp
          mkdir -p UI/src/test/resources/driver/
          mv /tmp/chromedriver UI/src/test/resources/driver/chromedriver
          chmod +x UI/src/test/resources/driver/chromedriver

      # Step 7: Install XVFB for GUI
      - name: Install XVFB
        run: |
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          nohup Xvfb :99 -screen 0 1920x1080x24 &

      # Step 8: Verify Chrome and ChromeDriver Versions
      - name: Verify Chrome and ChromeDriver Versions
        run: |
          google-chrome --version
          UI/src/test/resources/driver/chromedriver --version

      # Step 9: Install Maven dependencies
      - name: Install Maven dependencies
        run: mvn install -DskipTests
        working-directory: UI

      # Step 10: Run tests in headless mode and generate Allure results
      - name: Run tests and generate Allure results
        run: |
          mvn test -Dsurefire.suiteXmlFiles=testng.xml \
            -Dallure.results.directory=target/allure-results \
            -Dwebdriver.chrome.driver=UI/src/test/resources/driver/chromedriver \
            -Dchrome.options="--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --window-size=1920x1080"
        working-directory: UI

      # Step 11: Generate Allure HTML report
      - name: Generate Allure Report
        run: |
          npm install -g allure-commandline --force
          allure generate target/allure-results -o target/allure-report --clean
        working-directory: UI

      # Step 12: Upload Allure HTML report as an artifact
      - name: Upload Allure Report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: UI/target/allure-report
