{"uid":"57e4f27fa5577e82","name":"Update a book without mandatory fields (author)","fullName":"src/test/java/features/put_books.feature:52","historyId":"9b4e91636fe27d238ef12059af6ec904","time":{"start":1735887845746,"stop":1735887845834,"duration":88},"description":"Scenarios to validate PUT request using Basic Authentication.","descriptionHtml":"<p>Scenarios to validate PUT request using Basic Authentication.</p>\n","status":"failed","statusMessage":"expected [400] but found [208]","statusTrace":"java.lang.AssertionError: expected [400] but found [208]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 400 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/put_books.feature:61)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Scenarios to validate PUT request using Basic Authentication.","status":"failed","statusMessage":"expected [400] but found [208]","statusTrace":"java.lang.AssertionError: expected [400] but found [208]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 400 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/put_books.feature:61)\n","steps":[{"name":"Given I logged in to the system with admin credentials","time":{"start":1735887845746,"stop":1735887845747,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When I send a PUT request to \"/api/books/3\" with body:","time":{"start":1735887845747,"stop":1735887845833,"duration":86},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then I should receive a 400 status code","time":{"start":1735887845833,"stop":1735887845834,"duration":1},"status":"failed","statusMessage":"expected [400] but found [208]","statusTrace":"java.lang.AssertionError: expected [400] but found [208]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 400 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/put_books.feature:61)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1721-600"},{"name":"thread","value":"3607@fv-az1721-600.main(1)"},{"name":"feature","value":"Book Management API Tests"},{"name":"story","value":"Update a book without mandatory fields (author)"},{"name":"suite","value":"Book Management API Tests"},{"name":"testClass","value":"Update a book without mandatory fields (author)"},{"name":"framework","value":"cucumber4jvm"},{"name":"language","value":"java"},{"name":"gherkin_uri","value":"file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/put_books.feature"},{"name":"package","value":"src.test.java.features.put_books_feature.Book Management API Tests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"57e4f27fa5577e82.json","parameterValues":[]}