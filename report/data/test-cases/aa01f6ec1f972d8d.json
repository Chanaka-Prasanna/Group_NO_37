{"uid":"aa01f6ec1f972d8d","name":"Register a new book with a new title and an author by using an existing id","fullName":"src/test/java/features/post_books.feature:47","historyId":"458bd609375588439c3212460ee6cbd1","time":{"start":1735885019295,"stop":1735885019384,"duration":89},"description":"Scenarios To validate POST request using Basic Authentication.","descriptionHtml":"<p>Scenarios To validate POST request using Basic Authentication.</p>\n","status":"failed","statusMessage":"expected [409] but found [201]","statusTrace":"java.lang.AssertionError: expected [409] but found [201]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 409 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/post_books.feature:57)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Scenarios To validate POST request using Basic Authentication.","status":"failed","statusMessage":"expected [409] but found [201]","statusTrace":"java.lang.AssertionError: expected [409] but found [201]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 409 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/post_books.feature:57)\n","steps":[{"name":"Given I logged in to the system with user credentials","time":{"start":1735885019295,"stop":1735885019295,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When I send a POST request to \"/api/books\" with body:","time":{"start":1735885019295,"stop":1735885019384,"duration":89},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then I should receive a 409 status code","time":{"start":1735885019384,"stop":1735885019384,"duration":0},"status":"failed","statusMessage":"expected [409] but found [201]","statusTrace":"java.lang.AssertionError: expected [409] but found [201]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 409 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/post_books.feature:57)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1912-462"},{"name":"thread","value":"2037@fv-az1912-462.main(1)"},{"name":"feature","value":"Book Management API Tests"},{"name":"story","value":"Register a new book with a new title and an author by using an existing id"},{"name":"suite","value":"Book Management API Tests"},{"name":"testClass","value":"Register a new book with a new title and an author by using an existing id"},{"name":"framework","value":"cucumber4jvm"},{"name":"language","value":"java"},{"name":"gherkin_uri","value":"file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/post_books.feature"},{"name":"package","value":"src.test.java.features.post_books_feature.Book Management API Tests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"aa01f6ec1f972d8d.json","parameterValues":[]}