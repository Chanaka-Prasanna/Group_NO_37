{"uid":"b1e9d3ca57ff5aeb","name":"Delete a non existing book by ID as a User","fullName":"src/test/java/features/delete_books.feature:15","historyId":"ba22592c849d3c285eb95bb35f88f8a","time":{"start":1735905167728,"stop":1735905167835,"duration":107},"description":"Scenarios to validate DELETE request using Basic Authentication.","descriptionHtml":"<p>Scenarios to validate DELETE request using Basic Authentication.</p>\n","status":"failed","statusMessage":"expected [403] but found [404]","statusTrace":"java.lang.AssertionError: expected [403] but found [404]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 403 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/delete_books.feature:18)\n","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Scenarios to validate DELETE request using Basic Authentication.","status":"failed","statusMessage":"expected [403] but found [404]","statusTrace":"java.lang.AssertionError: expected [403] but found [404]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 403 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/delete_books.feature:18)\n","steps":[{"name":"Given I logged in to the system with user credentials","time":{"start":1735905167728,"stop":1735905167728,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When I send a DELETE request to \"/api/books/100\"","time":{"start":1735905167728,"stop":1735905167834,"duration":106},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Then I should receive a 403 status code","time":{"start":1735905167834,"stop":1735905167835,"duration":1},"status":"failed","statusMessage":"expected [403] but found [404]","statusTrace":"java.lang.AssertionError: expected [403] but found [404]\n\tat org.testng.Assert.fail(Assert.java:111)\n\tat org.testng.Assert.failNotEquals(Assert.java:1578)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:150)\n\tat org.testng.Assert.assertEquals(Assert.java:132)\n\tat org.testng.Assert.assertEquals(Assert.java:1419)\n\tat org.testng.Assert.assertEquals(Assert.java:1383)\n\tat org.testng.Assert.assertEquals(Assert.java:1429)\n\tat stepDefinitions.CommonSteps.iShouldReceiveAStatusCode(CommonSteps.java:41)\n\tat ✽.I should receive a 403 status code(file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/delete_books.feature:18)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1384-341"},{"name":"thread","value":"3648@fv-az1384-341.main(1)"},{"name":"feature","value":"Book Management API Tests"},{"name":"story","value":"Delete a non existing book by ID as a User"},{"name":"suite","value":"Book Management API Tests"},{"name":"testClass","value":"Delete a non existing book by ID as a User"},{"name":"framework","value":"cucumber4jvm"},{"name":"language","value":"java"},{"name":"gherkin_uri","value":"file:///home/runner/work/Group_NO_37/Group_NO_37/API/src/test/java/features/delete_books.feature"},{"name":"package","value":"src.test.java.features.delete_books_feature.Book Management API Tests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b1e9d3ca57ff5aeb.json","parameterValues":[]}